#!/bin/bash
# ========================================
# SCRIPT DE LIMPEZA COMPLETA DA VPS (ATUALIZADO PARA PRODU√á√ÉO)
# ========================================
# Este script limpa COMPLETAMENTE a VPS:
# - Para e remove TODOS os containers Docker (incluindo Traefik e Portainer)
# - Remove TODOS os volumes Docker
# - Remove TODAS as imagens Docker
# - Remove TODAS as redes Docker
# - Remove TODAS as configura√ß√µes do Nginx
# - Remove TODOS os certificados SSL
# - Remove TODOS os logs
# - Remove usu√°rio quiosque e permiss√µes
# - Remove cron jobs configurados
# - Remove configura√ß√µes de firewall
# - Remove diret√≥rios criados
# 
# ‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL!
# DEVE ser executado como root

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üßπ Script de Limpeza Completa da VPS (ATUALIZADO PARA PRODU√á√ÉO)"
    echo "==============================================================="
    echo
    echo "Uso: $0 [OP√á√ïES]"
    echo
    echo "OP√á√ïES:"
    echo "  -f, --force          For√ßar limpeza sem confirma√ß√£o"
    echo "  -d, --docker-only    Limpar apenas Docker (n√£o Nginx)"
    echo "  -n, --nginx-only     Limpar apenas Nginx (n√£o Docker)"
    echo "  -h, --help           Mostrar esta ajuda"
    echo
    echo "‚ö†Ô∏è  ATEN√á√ÉO:"
    echo "   Este script REMOVE TUDO da VPS!"
    echo "   Use apenas se tiver certeza absoluta!"
    echo
    echo "EXEMPLOS:"
    echo "  $0                    # Limpeza completa com confirma√ß√£o"
    echo "  $0 -f                 # Limpeza completa for√ßada"
    echo "  $0 -d                 # Limpar apenas Docker"
    echo "  $0 -n                 # Limpar apenas Nginx"
    echo
}

# Fun√ß√£o para verificar se √© root
check_root() {
    if [ "$EUID" -ne 0 ]; then
        log_color $RED "‚ùå Este script deve ser executado como root!"
        log_color $RED "‚ùå Execute: sudo $0"
        exit 1
    fi
}

# Fun√ß√£o para mostrar aviso de perigo
show_danger_warning() {
    log_color $RED "üö® PERIGO! PERIGO! PERIGO! üö®"
    log_color $RED "================================="
    echo
    log_color $RED "‚ö†Ô∏è  ATEN√á√ÉO: Este script vai REMOVER TUDO da VPS!"
    echo
    log_color $YELLOW "üî¥ O que ser√° REMOVIDO:"
    log_color $YELLOW "   ‚Ä¢ TODOS os containers Docker (Traefik, Portainer, etc.)"
    log_color $YELLOW "   ‚Ä¢ TODOS os volumes Docker (incluindo bancos de dados!)"
    log_color $YELLOW "   ‚Ä¢ TODAS as imagens Docker"
    log_color $YELLOW "   ‚Ä¢ TODAS as redes Docker"
    log_color $YELLOW "   ‚Ä¢ TODAS as configura√ß√µes do Nginx"
    log_color $YELLOW "   ‚Ä¢ TODOS os certificados SSL"
    log_color $YELLOW "   ‚Ä¢ TODOS os logs"
    log_color $YELLOW "   ‚Ä¢ TODOS os arquivos de configura√ß√£o"
    log_color $YELLOW "   ‚Ä¢ Usu√°rio quiosque e permiss√µes"
    log_color $YELLOW "   ‚Ä¢ Cron jobs configurados"
    log_color $YELLOW "   ‚Ä¢ Configura√ß√µes de firewall"
    log_color $YELLOW "   ‚Ä¢ Diret√≥rios criados (/opt/quiosque)"
    echo
    log_color $RED "üíÄ Esta opera√ß√£o √© IRREVERS√çVEL!"
    log_color $RED "üíÄ Todos os dados ser√£o PERDIDOS para sempre!"
    echo
    log_color $PURPLE "üìã RESUMO: VPS voltar√° ao estado inicial (limpa)"
    echo
}

# Fun√ß√£o para confirmar limpeza
confirm_cleanup() {
    local force="$1"
    
    if [ "$force" = "true" ]; then
        log_color $YELLOW "‚ö†Ô∏è Modo for√ßado ativado - pulando confirma√ß√£o"
        return 0
    fi
    
    show_danger_warning
    
    log_color $RED "‚ùì Voc√™ tem CERTEZA ABSOLUTA que quer continuar?"
    log_color $RED "‚ùì Digite 'LIMPAR TUDO' para confirmar: "
    read -r confirmation
    
    if [ "$confirmation" != "LIMPAR TUDO" ]; then
        log_color $GREEN "‚úÖ Opera√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    echo
    log_color $RED "‚ùì √öLTIMA CHANCE: Digite 'SIM, QUERO LIMPAR' para confirmar: "
    read -r final_confirmation
    
    if [ "$final_confirmation" != "SIM, QUERO LIMPAR" ]; then
        log_color $GREEN "‚úÖ Opera√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    echo
    log_color $RED "üö® CONFIRMADO! Iniciando limpeza COMPLETA da VPS..."
    log_color $RED "üö® N√£o h√° volta! Todos os dados ser√£o perdidos!"
    echo
}

# Fun√ß√£o para limpar Docker (incluindo Traefik e Portainer)
cleanup_docker() {
    log_color $BLUE "üê≥ Iniciando limpeza do Docker..."
    
    # Verificar se Docker est√° rodando
    if ! systemctl is-active --quiet docker; then
        log_color $YELLOW "‚ö†Ô∏è Docker n√£o est√° rodando, iniciando..."
        systemctl start docker
        sleep 2
    fi
    
    # Parar todos os containers
    log_color $BLUE "üõë Parando todos os containers..."
    if docker ps -q | wc -l | grep -q -v "0"; then
        docker stop $(docker ps -q) 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Containers parados"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhum container rodando"
    fi
    
    # Remover todos os containers
    log_color $BLUE "üóëÔ∏è Removendo todos os containers..."
    if docker ps -aq | wc -l | grep -q -v "0"; then
        docker rm -f $(docker ps -aq) 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Containers removidos"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhum container para remover"
    fi
    
    # Remover todos os volumes
    log_color $BLUE "üóëÔ∏è Removendo todos os volumes..."
    if docker volume ls -q | wc -l | grep -q -v "0"; then
        docker volume rm $(docker volume ls -q) 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Volumes removidos"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhum volume para remover"
    fi
    
    # Remover todas as imagens
    log_color $BLUE "üóëÔ∏è Removendo todas as imagens..."
    if docker images -q | wc -l | grep -q -v "0"; then
        docker rmi -f $(docker images -q) 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Imagens removidas"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhuma imagem para remover"
    fi
    
    # Remover todas as redes (exceto as padr√£o)
    log_color $BLUE "üóëÔ∏è Removendo redes customizadas..."
    docker network ls --filter "type=custom" -q | while read -r network; do
        docker network rm "$network" 2>/dev/null || true
    done
    log_color $GREEN "   ‚úÖ Redes customizadas removidas"
    
    # Limpar sistema Docker
    log_color $BLUE "üßπ Limpando sistema Docker..."
    docker system prune -af --volumes 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Sistema Docker limpo"
    
    log_color $GREEN "‚úÖ Limpeza do Docker conclu√≠da!"
}

# Fun√ß√£o para limpar Nginx
cleanup_nginx() {
    log_color $BLUE "üåê Iniciando limpeza COMPLETA do Nginx..."
    
    # Parar Nginx
    log_color $BLUE "üõë Parando Nginx..."
    systemctl stop nginx 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Nginx parado"
    
    # Remover TODAS as configura√ß√µes de sites
    log_color $BLUE "üóëÔ∏è Removendo TODAS as configura√ß√µes de sites..."
    rm -rf /etc/nginx/sites-available/* 2>/dev/null || true
    rm -rf /etc/nginx/sites-enabled/* 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Configura√ß√µes de sites removidas"
    
    # Remover certificados SSL COMPLETAMENTE
    log_color $BLUE "üóëÔ∏è Removendo TODOS os certificados SSL..."
    if [ -d "/etc/letsencrypt" ]; then
        rm -rf /etc/letsencrypt/* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Certificados SSL removidos completamente"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhum certificado SSL encontrado"
    fi
    
    # Remover logs do Nginx
    log_color $BLUE "üóëÔ∏è Removendo logs do Nginx..."
    rm -f /var/log/nginx/*.log 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Logs removidos"
    
    # Remover arquivos de configura√ß√£o customizados
    log_color $BLUE "üóëÔ∏è Removendo configura√ß√µes customizadas..."
    rm -f /etc/nginx/conf.d/*.conf 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Configura√ß√µes customizadas removidas"
    
    # Restaurar configura√ß√£o PADR√ÉO do Ubuntu
    log_color $BLUE "üîÑ Restaurando configura√ß√£o PADR√ÉO do Ubuntu..."
    cat > /etc/nginx/sites-available/default << 'EOF'
server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 444;
}
EOF
    log_color $GREEN "   ‚úÖ Configura√ß√£o padr√£o restaurada"
    
    # Habilitar site padr√£o
    ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/
    log_color $GREEN "   ‚úÖ Site padr√£o habilitado"
    
    # Testar configura√ß√£o
    log_color $BLUE "üîß Testando configura√ß√£o do Nginx..."
    if nginx -t; then
        log_color $GREEN "   ‚úÖ Configura√ß√£o v√°lida"
        
        # Iniciar Nginx
        log_color $BLUE "üöÄ Iniciando Nginx..."
        systemctl start nginx
        log_color $GREEN "   ‚úÖ Nginx iniciado"
    else
        log_color $RED "   ‚ùå Erro na configura√ß√£o do Nginx"
        return 1
    fi
    
    log_color $GREEN "‚úÖ Limpeza COMPLETA do Nginx conclu√≠da!"
}

# Fun√ß√£o para limpar usu√°rio e permiss√µes
cleanup_user_permissions() {
    log_color $BLUE "üë§ Iniciando limpeza de usu√°rio e permiss√µes..."
    
    # Remover usu√°rio quiosque se existir
    if id "quiosque" &>/dev/null; then
        log_color $BLUE "üóëÔ∏è Removendo usu√°rio quiosque..."
        
        # Remover cron jobs do usu√°rio
        crontab -u quiosque -r 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Cron jobs do usu√°rio quiosque removidos"
        
        # Remover usu√°rio e diret√≥rio home
        userdel -r quiosque 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Usu√°rio quiosque removido"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Usu√°rio quiosque n√£o encontrado"
    fi
    
    # Remover arquivo sudoers
    if [ -f "/etc/sudoers.d/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo permiss√µes sudo..."
        rm -f /etc/sudoers.d/quiosque
        log_color $GREEN "   ‚úÖ Permiss√µes sudo removidas"
    fi
    
    log_color $GREEN "‚úÖ Limpeza de usu√°rio e permiss√µes conclu√≠da!"
}

# Fun√ß√£o para limpar cron jobs
cleanup_cron_jobs() {
    log_color $BLUE "‚è∞ Iniciando limpeza de cron jobs..."
    
    # Remover cron jobs relacionados ao quiosque
    log_color $BLUE "üóëÔ∏è Removendo cron jobs do sistema..."
    
    # Fazer backup do crontab atual
    local backup_file="/tmp/crontab_backup_$(date +%Y%m%d_%H%M%S)"
    crontab -l > "$backup_file" 2>/dev/null || true
    
    # Remover linhas relacionadas ao quiosque
    if [ -f "$backup_file" ]; then
        grep -v "quiosque" "$backup_file" | crontab - 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Cron jobs relacionados ao quiosque removidos"
        rm -f "$backup_file"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Nenhum cron job encontrado"
    fi
    
    log_color $GREEN "‚úÖ Limpeza de cron jobs conclu√≠da!"
}

# Fun√ß√£o para limpar firewall e seguran√ßa
cleanup_firewall_security() {
    log_color $BLUE "üî• Iniciando limpeza de firewall e seguran√ßa..."
    
    # Resetar UFW para padr√£o
    log_color $BLUE "üîÑ Resetando UFW para padr√£o..."
    ufw --force reset 2>/dev/null || true
    log_color $GREEN "   ‚úÖ UFW resetado para padr√£o"
    
    # Remover configura√ß√µes do Fail2ban
    log_color $BLUE "üóëÔ∏è Removendo configura√ß√µes do Fail2ban..."
    if [ -f "/etc/fail2ban/jail.local" ]; then
        rm -f /etc/fail2ban/jail.local
        log_color $GREEN "   ‚úÖ Configura√ß√µes do Fail2ban removidas"
    fi
    
    # Reiniciar Fail2ban
    if systemctl is-active --quiet fail2ban; then
        systemctl restart fail2ban
        log_color $GREEN "   ‚úÖ Fail2ban reiniciado"
    fi
    
    log_color $GREEN "‚úÖ Limpeza de firewall e seguran√ßa conclu√≠da!"
}

# Fun√ß√£o para limpar diret√≥rios criados
cleanup_directories() {
    log_color $BLUE "üìÅ Iniciando limpeza de diret√≥rios criados..."
    
    # Remover diret√≥rio /opt/quiosque completamente
    if [ -d "/opt/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo diret√≥rio /opt/quiosque..."
        rm -rf /opt/quiosque
        log_color $GREEN "   ‚úÖ Diret√≥rio /opt/quiosque removido"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Diret√≥rio /opt/quiosque n√£o encontrado"
    fi
    
    # Remover diret√≥rio /home/quiosque se ainda existir
    if [ -d "/home/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo diret√≥rio /home/quiosque..."
        rm -rf /home/quiosque
        log_color $GREEN "   ‚úÖ Diret√≥rio /home/quiosque removido"
    fi
    
    # Remover logs criados pelo sistema
    log_color $BLUE "üóëÔ∏è Removendo logs do sistema..."
    rm -f /var/log/quiosque_*.log 2>/dev/null || true
    rm -f /var/log/quiosque_*.log.* 2>/dev/null || true
    log_color $GREEN "   ‚úÖ Logs do sistema removidos"
    
    # Remover arquivo de rota√ß√£o de logs
    if [ -f "/etc/logrotate.d/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo configura√ß√£o de rota√ß√£o de logs..."
        rm -f /etc/logrotate.d/quiosque
        log_color $GREEN "   ‚úÖ Configura√ß√£o de rota√ß√£o de logs removida"
    fi
    
    log_color $GREEN "‚úÖ Limpeza de diret√≥rios conclu√≠da!"
}

# Fun√ß√£o para limpar arquivos do sistema
cleanup_system_files() {
    log_color $BLUE "üóÇÔ∏è Iniciando limpeza de arquivos do sistema..."
    
    # Remover arquivos do projeto em /home/quiosque
    if [ -d "/home/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo arquivos do projeto em /home/quiosque..."
        cd /home/quiosque
        
        # Remover arquivos docker-compose
        rm -f docker-compose.*.yml 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Arquivos docker-compose removidos"
        
        # Remover arquivos .env
        rm -f .env* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Arquivos .env removidos"
        
        # Remover logs
        rm -rf logs/* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Logs removidos"
        
        log_color $GREEN "   ‚úÖ Arquivos do projeto removidos"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Diret√≥rio /home/quiosque n√£o encontrado"
    fi
    
    # Remover arquivos do projeto em /opt/quiosque
    if [ -d "/opt/quiosque" ]; then
        log_color $BLUE "üóëÔ∏è Removendo arquivos do projeto em /opt/quiosque..."
        cd /opt/quiosque
        
        # Remover arquivos docker-compose
        rm -f docker-compose.*.yml 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Arquivos docker-compose removidos"
        
        # Remover arquivos .env
        rm -f .env* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Arquivos .env removidos"
        
        # Remover logs
        rm -rf logs/* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Logs removidos"
        
        # Remover backups
        rm -rf backups/* 2>/dev/null || true
        log_color $GREEN "   ‚úÖ Backups removidos"
        
        log_color $GREEN "   ‚úÖ Arquivos do projeto em /opt/quiosque removidos"
    else
        log_color $BLUE "   ‚ÑπÔ∏è Diret√≥rio /opt/quiosque n√£o encontrado"
    fi
    
    log_color $GREEN "‚úÖ Limpeza de arquivos do sistema conclu√≠da!"
}

# Fun√ß√£o para mostrar resumo da limpeza
show_cleanup_summary() {
    log_color $GREEN "üéâ LIMPEZA COMPLETA DA VPS CONCLU√çDA!"
    log_color $GREEN "======================================="
    
    echo
    log_color $BLUE "üìã RESUMO DO QUE FOI REMOVIDO:"
    log_color $BLUE "   ‚úÖ Todos os containers Docker (Traefik, Portainer, etc.)"
    log_color $BLUE "   ‚úÖ Todos os volumes Docker (bancos de dados)"
    log_color $BLUE "   ‚úÖ Todas as imagens Docker"
    log_color $BLUE "   ‚úÖ Todas as redes Docker customizadas"
    log_color $BLUE "   ‚úÖ Todas as configura√ß√µes do Nginx"
    log_color $BLUE "   ‚úÖ Todos os certificados SSL"
    log_color $BLUE "   ‚úÖ Todos os logs"
    log_color $BLUE "   ‚úÖ Todos os arquivos de configura√ß√£o"
    log_color $BLUE "   ‚úÖ Usu√°rio quiosque e permiss√µes"
    log_color $BLUE "   ‚úÖ Cron jobs configurados"
    log_color $BLUE "   ‚úÖ Configura√ß√µes de firewall"
    log_color $BLUE "   ‚úÖ Diret√≥rios criados (/opt/quiosque)"
    
    echo
    log_color $YELLOW "‚ö†Ô∏è IMPORTANTE:"
    log_color $YELLOW "   ‚Ä¢ VPS est√° completamente limpa"
    log_color $YELLOW "   ‚Ä¢ Nginx est√° rodando com configura√ß√£o padr√£o"
    log_color $YELLOW "   ‚Ä¢ Docker est√° limpo e funcionando"
    log_color $YELLOW "   ‚Ä¢ Todos os dados foram perdidos permanentemente"
    log_color $YELLOW "   ‚Ä¢ Usu√°rio quiosque foi removido"
    log_color $YELLOW "   ‚Ä¢ Cron jobs foram removidos"
    log_color $YELLOW "   ‚Ä¢ Firewall foi resetado para padr√£o"
    
    echo
    log_color $GREEN "üöÄ PR√ìXIMOS PASSOS:"
    log_color $GREEN "   1. VPS est√° pronta para nova instala√ß√£o"
    log_color $GREEN "   2. Execute o script de setup novamente se necess√°rio"
    log_color $GREEN "   3. Configure novos clientes do zero"
    
    echo
    log_color $RED "üíÄ LEMBRE-SE: Esta opera√ß√£o foi IRREVERS√çVEL!"
}

# Fun√ß√£o principal
main() {
    # Vari√°veis
    local FORCE_MODE=false
    local DOCKER_ONLY=false
    local NGINX_ONLY=false
    
    # Verificar se h√° argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                FORCE_MODE=true
                shift
                ;;
            -d|--docker-only)
                DOCKER_ONLY=true
                shift
                ;;
            -n|--nginx-only)
                NGINX_ONLY=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_color $RED "‚ùå Op√ß√£o desconhecida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Verificar se √© root
    check_root
    
    # Mostrar cabe√ßalho
    log_color $PURPLE "üßπ SCRIPT DE LIMPEZA COMPLETA DA VPS (ATUALIZADO PARA PRODU√á√ÉO)"
    log_color $PURPLE "================================================================="
    echo
    
    # Confirmar limpeza
    confirm_cleanup "$FORCE_MODE"
    
    # Executar limpeza baseada nas op√ß√µes
    if [ "$DOCKER_ONLY" = "true" ]; then
        log_color $BLUE "üê≥ Modo Docker apenas selecionado"
        cleanup_docker
    elif [ "$NGINX_ONLY" = "true" ]; then
        log_color $BLUE "üåê Modo Nginx apenas selecionado"
        cleanup_nginx
    else
        log_color $BLUE "üöÄ Modo limpeza completa selecionado"
        cleanup_docker
        cleanup_nginx
        cleanup_user_permissions
        cleanup_cron_jobs
        cleanup_firewall_security
        cleanup_directories
        cleanup_system_files
    fi
    
    # Mostrar resumo
    show_cleanup_summary
}

# Executar fun√ß√£o principal
main "$@"
