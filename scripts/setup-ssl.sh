#!/bin/bash
# ========================================
# SCRIPT PARA CONFIGURAR SSL COM CERTBOT
# ========================================
# Este script configura SSL/HTTPS para todos os subdom√≠nios usando Let's Encrypt
# DEVE ser executado como root

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para log colorido
log_color() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    echo "üîí Script para Configurar SSL com Certbot"
    echo "=========================================="
    echo
    echo "Uso: $0 [OP√á√ïES]"
    echo
    echo "OP√á√ïES:"
    echo "  -d, --domain DOMAIN        Dom√≠nio principal (ex: meudominio.com)"
    echo "  -s, --subdomains LIST      Lista de subdom√≠nios separados por v√≠rgula"
    echo "  -e, --email EMAIL          Email para notifica√ß√µes do Let's Encrypt"
    echo "  -t, --test                 Modo de teste (staging)"
    echo "  -h, --help                 Mostrar esta ajuda"
    echo
    echo "EXEMPLOS:"
    echo "  $0 -d meudominio.com -s 'bater_do_mar,saborbrasileiro' -e 'admin@meudominio.com'"
    echo "  $0 -d meudominio.com -s 'rest1,rest2,rest3' -e 'admin@meudominio.com' -t"
    echo
}

# Fun√ß√£o para verificar se Certbot est√° instalado
check_certbot() {
    log_color $BLUE "üîç Verificando se Certbot est√° instalado..."
    
    if ! command -v certbot &> /dev/null; then
        log_color $RED "‚ùå Certbot n√£o est√° instalado!"
        log_color $BLUE "üì¶ Instalando Certbot..."
        
        apt update
        apt install -y certbot python3-certbot-nginx
        
        log_color $GREEN "‚úÖ Certbot instalado"
    else
        log_color $GREEN "‚úÖ Certbot j√° est√° instalado"
    fi
}

# Fun√ß√£o para configurar SSL para dom√≠nio principal
setup_main_domain_ssl() {
    local domain="$1"
    local email="$2"
    local test_mode="$3"
    
    log_color $BLUE "üîí Configurando SSL para dom√≠nio principal: ${domain}"
    
    local certbot_cmd="certbot --nginx"
    
    if [ "$test_mode" = true ]; then
        certbot_cmd="$certbot_cmd --test-cert"
        log_color $YELLOW "‚ö†Ô∏è Modo de teste ativado (staging)"
    fi
    
    # Configurar SSL para dom√≠nio principal
    if $certbot_cmd -d "$domain" -d "www.$domain" --email "$email" --agree-tos --non-interactive; then
        log_color $GREEN "‚úÖ SSL configurado para ${domain}"
    else
        log_color $RED "‚ùå Erro ao configurar SSL para ${domain}"
        return 1
    fi
}

# Fun√ß√£o para configurar SSL para subdom√≠nio admin
setup_admin_ssl() {
    local domain="$1"
    local email="$2"
    local test_mode="$3"
    
    log_color $BLUE "üîí Configurando SSL para admin.${domain}"
    
    local certbot_cmd="certbot --nginx"
    
    if [ "$test_mode" = true ]; then
        certbot_cmd="$certbot_cmd --test-cert"
    fi
    
    # Configurar SSL para subdom√≠nio admin
    if $certbot_cmd -d "admin.$domain" --email "$email" --agree-tos --non-interactive; then
        log_color $GREEN "‚úÖ SSL configurado para admin.${domain}"
    else
        log_color $RED "‚ùå Erro ao configurar SSL para admin.${domain}"
        return 1
    fi
}

# Fun√ß√£o para configurar SSL para subdom√≠nios dos restaurantes
setup_restaurant_ssl() {
    local domain="$1"
    local subdomains="$2"
    local email="$3"
    local test_mode="$4"
    
    log_color $BLUE "üîí Configurando SSL para subdom√≠nios dos restaurantes..."
    
    local certbot_cmd="certbot --nginx"
    
    if [ "$test_mode" = true ]; then
        certbot_cmd="$certbot_cmd --test-cert"
    fi
    
    # Processar cada subdom√≠nio
    IFS=',' read -ra SUBDOMAIN_ARRAY <<< "$subdomains"
    
    for subdomain in "${SUBDOMAIN_ARRAY[@]}"; do
        subdomain=$(echo "$subdomain" | xargs)  # Remove espa√ßos
        
        log_color $BLUE "üîí Configurando SSL para ${subdomain}.${domain}"
        
        if $certbot_cmd -d "${subdomain}.$domain" --email "$email" --agree-tos --non-interactive; then
            log_color $GREEN "‚úÖ SSL configurado para ${subdomain}.${domain}"
        else
            log_color $RED "‚ùå Erro ao configurar SSL para ${subdomain}.${domain}"
            # Continuar com outros subdom√≠nios
        fi
    done
}

# Fun√ß√£o para configurar renova√ß√£o autom√°tica
setup_auto_renewal() {
    log_color $BLUE "üîÑ Configurando renova√ß√£o autom√°tica de certificados..."
    
    # Verificar se o cron job j√° existe
    if crontab -l 2>/dev/null | grep -q "certbot renew"; then
        log_color $YELLOW "‚ö†Ô∏è Cron job para renova√ß√£o j√° existe"
    else
        # Adicionar cron job para renova√ß√£o autom√°tica
        (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet --nginx") | crontab -
        log_color $GREEN "‚úÖ Cron job para renova√ß√£o autom√°tica configurado"
    fi
    
    # Testar renova√ß√£o
    log_color $BLUE "üß™ Testando renova√ß√£o autom√°tica..."
    if certbot renew --dry-run; then
        log_color $GREEN "‚úÖ Teste de renova√ß√£o bem-sucedido"
    else
        log_color $YELLOW "‚ö†Ô∏è Teste de renova√ß√£o falhou (pode ser normal em ambiente de teste)"
    fi
}

# Fun√ß√£o para verificar status dos certificados
check_certificates() {
    log_color $BLUE "üìã Verificando status dos certificados..."
    
    echo
    certbot certificates
    
    echo
    log_color $BLUE "üìä Resumo dos certificados:"
    
    # Listar todos os certificados
    certbot certificates | grep -E "Domains:|Expiry Date:" | while read -r line; do
        if [[ $line == *"Domains:"* ]]; then
            echo "   üåê $line"
        elif [[ $line == *"Expiry Date:"* ]]; then
            echo "   üìÖ $line"
            echo
        fi
    done
}

# Fun√ß√£o para configurar HSTS e seguran√ßa
setup_security_headers() {
    log_color $BLUE "üõ°Ô∏è Configurando headers de seguran√ßa..."
    
    # Criar arquivo de configura√ß√£o para headers de seguran√ßa
    cat > "/etc/nginx/conf.d/security-headers.conf" << 'EOF'
# Headers de seguran√ßa para todos os sites
add_header X-Frame-Options "SAMEORIGIN" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;
add_header Referrer-Policy "strict-origin-when-cross-origin" always;
add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'self';" always;

# HSTS (HTTP Strict Transport Security)
add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

# Remover vers√£o do Nginx
server_tokens off;
EOF

    log_color $GREEN "‚úÖ Headers de seguran√ßa configurados"
}

# Fun√ß√£o para mostrar resumo final
show_summary() {
    local domain="$1"
    local subdomains="$2"
    local test_mode="$3"
    
    log_color $GREEN "üéâ CONFIGURA√á√ÉO SSL CONCLU√çDA!"
    log_color $GREEN "==============================="
    
    echo
    log_color $BLUE "üîí CERTIFICADOS SSL CONFIGURADOS:"
    log_color $BLUE "   ‚Ä¢ Dom√≠nio principal: https://${domain}"
    log_color $BLUE "   ‚Ä¢ Admin: https://admin.${domain}"
    
    IFS=',' read -ra SUBDOMAIN_ARRAY <<< "$subdomains"
    for subdomain in "${SUBDOMAIN_ARRAY[@]}"; do
        subdomain=$(echo "$subdomain" | xargs)
        log_color $BLUE "   ‚Ä¢ ${subdomain}: https://${subdomain}.${domain}"
    done
    
    echo
    log_color $BLUE "üõ°Ô∏è RECURSOS DE SEGURAN√áA:"
    log_color $BLUE "   ‚Ä¢ Headers de seguran√ßa configurados"
    log_color $BLUE "   ‚Ä¢ HSTS habilitado"
    log_color $BLUE "   ‚Ä¢ Renova√ß√£o autom√°tica configurada"
    
    if [ "$test_mode" = true ]; then
        echo
        log_color $YELLOW "‚ö†Ô∏è MODO DE TESTE ATIVADO:"
        log_color $YELLOW "   ‚Ä¢ Certificados s√£o de staging (n√£o v√°lidos para produ√ß√£o)"
        log_color $YELLOW "   ‚Ä¢ Execute novamente sem -t para certificados de produ√ß√£o"
    fi
    
    echo
    log_color $YELLOW "üìã PR√ìXIMOS PASSOS:"
    log_color $YELLOW "1. Teste todos os subdom√≠nios via HTTPS"
    log_color $YELLOW "2. Configure backup dos certificados"
    log_color $YELLOW "3. Monitore a renova√ß√£o autom√°tica"
    log_color $YELLOW "4. Configure monitoramento de expira√ß√£o"
    
    echo
    log_color $GREEN "üåê URLs HTTPS:"
    log_color $GREEN "   ‚Ä¢ Admin: https://admin.${domain}"
    IFS=',' read -ra SUBDOMAIN_ARRAY <<< "$subdomains"
    for subdomain in "${SUBDOMAIN_ARRAY[@]}"; do
        subdomain=$(echo "$subdomain" | xargs)
        log_color $GREEN "   ‚Ä¢ ${subdomain}: https://${subdomain}.${domain}"
    done
}

# Fun√ß√£o principal
main() {
    # Vari√°veis
    local DOMAIN=""
    local SUBDOMAINS=""
    local EMAIL=""
    local TEST_MODE=false
    
    # Verificar se h√° argumentos
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    # Processar argumentos
    while [[ $# -gt 0 ]]; do
        case $1 in
            -d|--domain)
                DOMAIN="$2"
                shift 2
                ;;
            -s|--subdomains)
                SUBDOMAINS="$2"
                shift 2
                ;;
            -e|--email)
                EMAIL="$2"
                shift 2
                ;;
            -t|--test)
                TEST_MODE=true
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            *)
                log_color $RED "‚ùå Op√ß√£o desconhecida: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Validar argumentos obrigat√≥rios
    if [[ -z "$DOMAIN" ]]; then
        log_color $RED "‚ùå Dom√≠nio √© obrigat√≥rio (-d ou --domain)"
        exit 1
    fi
    
    if [[ -z "$SUBDOMAINS" ]]; then
        log_color $RED "‚ùå Subdom√≠nios s√£o obrigat√≥rios (-s ou --subdomains)"
        exit 1
    fi
    
    if [[ -z "$EMAIL" ]]; then
        log_color $RED "‚ùå Email √© obrigat√≥rio (-e ou --email)"
        exit 1
    fi
    
    # Verificar se √© root
    if [ "$EUID" -ne 0 ]; then
        log_color $RED "‚ùå Este script deve ser executado como root!"
        log_color $RED "‚ùå Execute: sudo $0"
        exit 1
    fi
    
    # Mostrar resumo da configura√ß√£o
    log_color $GREEN "üîí CONFIGURA√á√ÉO SSL COM CERTBOT"
    log_color $GREEN "================================="
    echo
    log_color $BLUE "üìã RESUMO DA CONFIGURA√á√ÉO:"
    log_color $BLUE "   Dom√≠nio Principal: $DOMAIN"
    log_color $BLUE "   Subdom√≠nios: $SUBDOMAINS"
    log_color $BLUE "   Email: $EMAIL"
    log_color $BLUE "   Modo Teste: $TEST_MODE"
    echo
    
    # Confirmar configura√ß√£o
    read -p "‚ùì Confirmar configura√ß√£o SSL? (S/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Ss]$ ]]; then
        log_color $YELLOW "‚ùå Configura√ß√£o cancelada pelo usu√°rio"
        exit 0
    fi
    
    log_color $GREEN "üöÄ Iniciando configura√ß√£o SSL..."
    
    # Executar etapas
    check_certbot
    setup_main_domain_ssl "$DOMAIN" "$EMAIL" "$TEST_MODE"
    setup_admin_ssl "$DOMAIN" "$EMAIL" "$TEST_MODE"
    setup_restaurant_ssl "$DOMAIN" "$SUBDOMAINS" "$EMAIL" "$TEST_MODE"
    setup_security_headers
    setup_auto_renewal
    check_certificates
    show_summary "$DOMAIN" "$SUBDOMAINS" "$TEST_MODE"
}

# Executar fun√ß√£o principal
main "$@"
